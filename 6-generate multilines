set @@dataset_project_id = 'letest-409019';
set @@dataset_id = 'LETestDataset';

create or replace table multilines as
with
removeNull as (
  select * 
  from joinedData
  where GpsLatitude is not null and GpsLongitude is not null
),
prevnext as (
  select machineId, DateTime, gpsLongitude, gpsLatitude,
  LEAD(gpsLongitude) OVER (PARTITION BY MachineId ORDER BY datetime) AS nextGpsLongitude,
  LAG(gpsLongitude) OVER (PARTITION BY MachineId ORDER BY datetime) AS prevGpsLongitude,
  LEAD(gpsLatitude) OVER (PARTITION BY MachineId ORDER BY datetime) AS nextGpsLatitude,
  LAG(gpsLatitude) OVER (PARTITION BY MachineId ORDER BY datetime) AS prevGpsLatitude,
  LEAD(datetime) OVER (PARTITION BY MachineId ORDER BY datetime) AS nextDatetime,
  LAG(datetime) OVER (PARTITION BY MachineId ORDER BY datetime) AS prevDatetime
  from removeNull
  order by MachineId, datetime
),
addStartStop as (
  select machineId, datetime, gpsLongitude, gpsLatitude,
  case 
      when (abs(gpsLongitude * 500 - prevGpsLongitude * 500) >1) then 'start'
      when (abs(gpsLatitude * 500 - prevGpsLatitude * 500)>1) then 'start'
      when (abs(gpsLongitude * 500 - nextGpsLongitude * 500)>1) then 'stop'
      when (abs(gpsLatitude * 500 - nextGpsLatitude * 500)>1) then 'stop'
      when (abs(date_diff(datetime, prevDatetime, second))>600) then 'start'
      when (abs(date_diff(datetime, nextDatetime, second))>600) then 'stop'
      else ''
  end as running
  from prevnext
  order by machineId, datetime
),
startStop as (
  select * from addStartStop
  where running = 'start' or running = 'stop'
),
intervals as (
  select MachineId, datetime as startDateTime, running as startState, gpsLongitude as startLongitude, gpsLatitude as startLatitude,
        Lead(datetime) over (PARTITION BY MachineId ORDER BY datetime) AS stopDateTime,
        Lead(running) over (PARTITION BY MachineId ORDER BY datetime) AS stopState,
        Lead(gpsLongitude) over (PARTITION BY MachineId ORDER BY datetime) AS stopLongitude,
        Lead(gpsLatitude) over (PARTITION BY MachineId ORDER BY datetime) AS stopLatitude
  from startstop
),
fixedIntervals as (
  select * from intervals where startState = 'start' and stopState = 'stop'
),
removedNullWithTime as (
  select r.*, date_diff(r.DateTime, Lag(r.datetime) over (PARTITION BY r.MachineId ORDER BY r.datetime), SECOND) as timeInSeconds
  from removeNull as r
),
IntervalsWithGps as (
  select i.MachineId, i.startDateTime, i.StopDateTime, i.startLongitude, i.startLatitude, i.stopLongitude, i.stopLatitude, j.datetime, 
      j.gpsLongitude, j.gpsLatitude, j.FuelConsumption_l_h, j.timeInSeconds
  from fixedIntervals as i, removedNullWithTime as j
  where i.MachineId = j.MachineId and j.datetime > i.startDateTime and j.datetime < i.stopDateTime
  order by MachineId, i.startDateTime, j.datetime 
), 
joinedStrings as (
  select MachineId, startDateTime, stopDateTime, startLongitude, startLatitude, stopLongitude, stopLatitude, round(sum(timeInSeconds * FuelConsumption_l_h) / 3600, 2) as FuelConsumed , count(*) cnt,
    concat('LINESTRING(',string_agg(concat(gpsLongitude, ' ', gpsLatitude), ',' order by datetime), ')') as multiline
  from intervalsWithGps
  group by MachineId, startDateTime, stopDateTime, startLongitude, startLatitude, stopLongitude, stopLatitude
)
select extract(date from startDateTime) as date, MachineId, startDateTime, stopDateTime, 
    st_geogpoint(startLongitude, startLatitude) as RunPointStart, 
    st_geogpoint(stopLongitude, stopLatitude) as RunPointEnd, 
    st_geogfromtext(multiline, make_valid => TRUE) as multiline,
    st_length(st_geogfromtext(multiline,make_valid => TRUE)) as len,
    FuelConsumed
from joinedStrings
where cnt>10
